/* libsummer-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Summer", lower_case_cprefix = "summer_")]
namespace Summer {
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class AtomParser : Summer.FeedParser {
		[CCode (has_construct_function = false)]
		public AtomParser ();
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class Download : GLib.Object {
		public virtual void abort ();
		public bool @delete () throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned string get_filename ();
		public unowned string get_save_dir ();
		public unowned string get_save_path ();
		public Summer.DownloadState get_state ();
		public unowned string get_tmp_dir ();
		public bool is_paused ();
		public static void set_default (string? tmp_dir, string? save_dir);
		public void set_filename (string filename);
		public void set_paused (bool pause);
		public void set_save_dir (string save_dir);
		public void set_tmp_dir (string tmp_dir);
		public virtual void start ();
		[NoAccessorMethod]
		public Summer.DownloadableData downloadable { owned get; construct; }
		public string filename { get; set; }
		[NoAccessorMethod]
		public Summer.ItemData item { owned get; construct; }
		[NoAccessorMethod]
		public bool paused { get; set; }
		public string save_dir { get; set; }
		public Summer.DownloadState state { get; }
		public string tmp_dir { get; set; }
		[NoAccessorMethod]
		public string url { owned get; }
		public virtual signal void download_complete ();
		public virtual signal void download_done ();
		public virtual signal void download_error (void* error);
		public virtual signal void download_started ();
		public virtual signal void download_update (uint64 received, uint64 length);
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class DownloadTorrent : Summer.Download {
		[CCode (type = "SummerDownload*", has_construct_function = false)]
		public DownloadTorrent (Summer.ItemData item);
		public static void set_default (int min_port, int max_port, int max_up_speed, float max_ratio);
		public static void shutdown ();
		[NoAccessorMethod]
		public float max_ratio { get; set; }
		[NoAccessorMethod]
		public int max_up_speed { get; set; }
		[NoAccessorMethod]
		public int port { get; }
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class DownloadWeb : Summer.Download {
		[CCode (type = "SummerDownload*", has_construct_function = false)]
		public DownloadWeb (Summer.ItemData item);
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class DownloadYoutube : Summer.Download {
		[CCode (type = "SummerDownload*", has_construct_function = false)]
		public DownloadYoutube (Summer.ItemData item);
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class DownloadableData : GLib.Object {
		public weak Summer.ItemData item;
		public uint64 length;
		public weak string mime;
		public weak string url;
		public uint64 get_length ();
		public unowned string get_mime ();
		public unowned string get_url ();
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class Feed : GLib.Object {
		public unowned string get_author ();
		public unowned string get_cache_dir ();
		public unowned string get_description ();
		public int get_frequency ();
		public unowned string get_id ();
		public unowned GLib.List<Summer.ItemData> get_items ();
		public unowned string get_title ();
		public ulong get_updated ();
		public unowned string get_url ();
		public unowned string get_web_url ();
		[CCode (has_construct_function = false)]
		public Feed ();
		public unowned GLib.List peek_items ();
		public void set_cache_dir (string cache_dir);
		public static void set_default (string? cache_dir, int frequency);
		public void set_frequency (int frequency);
		public void set_url (string url);
		public static void shutdown ();
		public void start (string url);
		public string author { get; }
		public string cache_dir { get; set; }
		public string description { get; }
		public int frequency { get; set; }
		public string id { get; }
		public void* items { get; }
		public string title { get; }
		public long updated { get; }
		public string url { get; set; }
		public string web_url { get; }
		public virtual signal void new_entries ();
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class FeedCache : GLib.Object {
		public void add_new_item (Summer.ItemData item);
		public void filter_old_items (GLib.List items);
		public static unowned Summer.FeedCache get ();
		[NoAccessorMethod]
		public string cache_file { owned get; set; }
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class FeedData : GLib.Object {
		public weak string author;
		public weak string description;
		public weak string id;
		public weak GLib.List items;
		public weak string title;
		public ulong updated;
		public weak string url;
		public weak string web_url;
		public unowned Summer.ItemData append_item ();
		public unowned string get_author ();
		public unowned string get_description ();
		public unowned string get_id ();
		public unowned GLib.List get_items ();
		public unowned string get_title ();
		public ulong get_updated ();
		public unowned string get_web_url ();
		[CCode (has_construct_function = false)]
		public FeedData ();
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class FeedParser : GLib.Object {
		public virtual int handle_node (Xml.TextReader node, Summer.FeedData feed, bool is_item);
		public unowned Summer.FeedData parse (int num_parsers, Xml.TextReader reader);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class FeedRss {
		public weak GLib.Object parent;
		[CCode (has_construct_function = false)]
		public FeedRss ();
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class FeedRssClass {
		public weak GLib.ObjectClass parent_class;
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class ItemData : GLib.Object {
		public weak string author;
		public weak string description;
		public weak GLib.List downloadables;
		public weak Summer.FeedData feed;
		public weak string id;
		public weak string title;
		public ulong updated;
		public weak string web_url;
		public unowned Summer.DownloadableData append_downloadable (string url, string mime, uint64 length);
		public unowned string get_author ();
		public unowned string get_description ();
		public unowned GLib.List get_downloadables ();
		public unowned string get_id ();
		public unowned string get_title ();
		public ulong get_updated ();
		public unowned string get_web_url ();
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerDownloader {
		public weak GLib.Object parent;
		[CCode (cname = "libsummer_downloader_can_download")]
		public static bool can_download (uchar[] url, uchar[] mime);
		[CCode (cname = "libsummer_downloader_new", type = "LibsummerDownloader*", has_construct_function = false)]
		public LibsummerDownloader ();
		[CCode (cname = "libsummer_downloader_run")]
		public static void run (Summer.LibsummerDownloader obj);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerDownloaderClass {
		public weak GLib.Callback download_complete;
		public weak GLib.Callback download_update;
		public weak GLib.ObjectClass parent_class;
		public weak GLib.Callback run;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerDownloaderWeb {
		public weak Summer.LibsummerDownloader parent;
		[CCode (cname = "libsummer_downloader_web_can_download")]
		public static bool can_download (uchar[] url, uchar[] mime);
		[CCode (cname = "libsummer_downloader_web_new", type = "LibsummerDownloader*", has_construct_function = false)]
		public LibsummerDownloaderWeb (uchar[] url);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerDownloaderWebClass {
		public weak Summer.LibsummerDownloaderClass parent_class;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerFeedDownloader {
		public weak GLib.Object parent;
		[CCode (cname = "libsummer_feed_downloader_new", type = "LibsummerFeedDownloader*", has_construct_function = false)]
		public LibsummerFeedDownloader ();
		[CCode (cname = "libsummer_feed_downloader_run")]
		public static void run (Summer.LibsummerFeedDownloader obj);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerFeedDownloaderClass {
		public weak GLib.Callback feed_downloaded;
		public weak GLib.ObjectClass parent_class;
		public weak GLib.Callback run;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerFeedDownloaderRss {
		public weak Summer.LibsummerFeedDownloader parent;
		[CCode (cname = "libsummer_feed_downloader_rss_can_download")]
		public static bool can_download (string url);
		[CCode (cname = "libsummer_feed_downloader_rss_new", type = "LibsummerFeedDownloader*", has_construct_function = false)]
		public LibsummerFeedDownloaderRss (string url);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerFeedDownloaderRssClass {
		public weak Summer.LibsummerFeedDownloaderClass parent_class;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerFeedEntry {
		[CCode (array_length = false)]
		public weak uchar[] description;
		[CCode (array_length = false)]
		public weak uchar[] mime;
		[CCode (array_length = false)]
		public weak uchar[] name;
		public int size;
		[CCode (array_length = false)]
		public weak uchar[] url;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerWebBackend {
		public weak GLib.Object parent;
		[CCode (cname = "libsummer_web_backend_new", type = "LibsummerWebBackend*", has_construct_function = false)]
		public LibsummerWebBackend ();
		[CCode (cname = "libsummer_web_backend_run")]
		public static void run (Summer.LibsummerWebBackend obj, string url);
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerWebBackendClass {
		public weak GLib.Callback chunk;
		public weak GLib.Callback complete;
		public weak GLib.ObjectClass parent_class;
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class LibsummerWebData {
		public weak string buffer;
		public int64 length;
		public weak string uri;
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class Rss2Parser : Summer.FeedParser {
		[CCode (has_construct_function = false)]
		public Rss2Parser ();
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class WebBackend : GLib.Object {
		public void abort ();
		public void fetch ();
		public void fetch_head ();
		[CCode (has_construct_function = false)]
		public WebBackend (string save_dir, string url);
		[NoAccessorMethod]
		public string filename { owned get; }
		[NoAccessorMethod]
		public uint64 length { get; }
		[NoAccessorMethod]
		public string save_dir { owned get; construct; }
		[NoAccessorMethod]
		public string url { owned get; set construct; }
		public virtual signal void download_chunk (uint64 received, uint64 length);
		public virtual signal void download_complete (string save_path, string save_data);
		public virtual signal void headers_parsed ();
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class XmlBackend {
		public weak GLib.Object parent;
		[CCode (has_construct_function = false)]
		public XmlBackend ();
	}
	[Compact]
	[CCode (cheader_filename = "libsummer/summer.h")]
	public class XmlBackendClass {
		public weak GLib.ObjectClass parent_class;
	}
	[CCode (cprefix = "SUMMER_DOWNLOAD_STATE_", has_type_id = "0", cheader_filename = "libsummer/summer.h")]
	public enum DownloadState {
		UNKNOWN,
		DOWNLOADING,
		FAILED,
		SEEDING,
		DONE
	}
	[CCode (cheader_filename = "libsummer/summer.h")]
	public static unowned Summer.Download create_download (Summer.ItemData item);
	[CCode (cheader_filename = "libsummer/summer.h")]
	public static bool debug (string str);
	[CCode (cname = "libsummer_create_downloader", cheader_filename = "libsummer/summer.h")]
	public static unowned Summer.LibsummerDownloader libsummer_create_downloader (uchar[] url, uchar[] mime);
	[CCode (cname = "libsummer_create_feed_downloader", cheader_filename = "libsummer/summer.h")]
	public static unowned Summer.LibsummerFeedDownloader libsummer_create_feed_downloader (string url);
	[CCode (cname = "libsummer_init", cheader_filename = "libsummer/summer.h")]
	public static void libsummer_init ();
	[CCode (cheader_filename = "libsummer/summer.h")]
	public static void shutdown ();
}
