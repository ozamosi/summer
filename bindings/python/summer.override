%%
headers
#include <Python.h>
#include <pygobject.h>
#include <pyglib.h>
#include "summer.h"
#include "summer-download-torrent.h"
#include "summer-download-web.h"
%%
modulename summer
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override summer_feed_peek_items noargs
static PyObject *
_wrap_summer_feed_peek_items (PyGObject *self)
{
	GList *list, *tmp;
	PyObject *py_list;

	list = summer_feed_peek_items (SUMMER_FEED (self->obj));

	if ((py_list = PyList_New (0)) == NULL) {
		g_list_free (list);
		return NULL;
	}
	for (tmp = list; tmp != NULL; tmp = tmp->next) {
		PyObject *obj = pygobject_new (G_OBJECT (tmp->data));

		if (obj == NULL) {
			g_list_free (list);
			Py_DECREF (py_list);
			return NULL;
		}
		PyList_Append (py_list, obj);
		Py_DECREF (obj);
	}
	g_list_free (list);
	return py_list;
}
%%
override summer_feed_get_items noargs
static PyObject *
_wrap_summer_feed_get_items (PyGObject *self)
{
	GList *list, *tmp;
	PyObject *py_list;

	list = summer_feed_get_items (SUMMER_FEED (self->obj));

	if ((py_list = PyList_New (0)) == NULL) {
		g_list_free (list);
		return NULL;
	}
	for (tmp = list; tmp != NULL; tmp = tmp->next) {
		PyObject *obj = pygobject_new (G_OBJECT (tmp->data));

		if (obj == NULL) {
			g_list_free (list);
			Py_DECREF (py_list);
			return NULL;
		}
		PyList_Append (py_list, obj);
		Py_DECREF (obj);
	}
	g_list_free (list);
	return py_list;
}
%%
override summer_feed_data_get_items noargs
static PyObject *
_wrap_summer_feed_data_get_items (PyGObject *self)
{
	GList *list, *tmp;
	PyObject *py_list;

	list = summer_feed_data_get_items (SUMMER_FEED_DATA (self->obj));

	if ((py_list = PyList_New (0)) == NULL) {
		return NULL;
	}
	for (tmp = list; tmp != NULL; tmp = tmp->next) {
		PyObject *obj = pygobject_new (G_OBJECT (tmp->data));

		if (obj == NULL) {
			Py_DECREF (py_list);
			return NULL;
		}
		PyList_Append (py_list, obj);
		Py_DECREF (obj);
	}
	return py_list;
}
%%
override summer_item_data_get_downloadables noargs
static PyObject *
_wrap_summer_item_data_get_downloadables (PyGObject *self)
{
	GList *list, *tmp;
	PyObject *py_list;

	list = summer_item_data_get_downloadables (SUMMER_ITEM_DATA (self->obj));

	if ((py_list = PyList_New (0)) == NULL) {
		return NULL;
	}
	for (tmp = list; tmp != NULL; tmp = tmp->next) {
		PyObject *obj = pygobject_new (G_OBJECT (tmp->data));

		if (obj == NULL) {
			Py_DECREF (py_list);
			return NULL;
		}
		PyList_Append (py_list, obj);
		Py_DECREF (obj);
	}
	return py_list;
}
%%
override-slot SummerFeed.tp_as_mapping
static Py_ssize_t
_wrap_summer_feed_tp_length(PyGObject *self)
{
	return 10;
}
static PyObject *
_wrap_summer_feed_tp_getitem(PyGObject *self, PyObject *item)
{
	PyObject *ret = NULL;
	SummerFeed *feed = SUMMER_FEED (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "frequency")) {
		gint val;
		g_object_get (feed,
			prop, &val,
			NULL);
		ret = PyInt_FromSsize_t (val);
	} else if (!g_strcmp0 (prop, "updated")) {
		glong val;
		g_object_get (feed,
			prop, &val,
			NULL);
		ret = PyInt_FromLong (val);
	} else if (!g_strcmp0 (prop, "items")) {
		ret = _wrap_summer_feed_peek_items (self);
	} else {
		gchar *val;
		g_object_get (feed,
			prop, &val,
			NULL);
		ret = PyString_FromString (val);
	}
	return ret;
}
static int
_wrap_summer_feed_tp_setitem(PyGObject *self, PyObject *item, PyObject *value)
{
	SummerFeed *feed = SUMMER_FEED (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "frequency")) {
		gint val = PyInt_AsSsize_t (value);
		g_object_set (feed,
			prop, val,
			NULL);
		return 0;
	} else {
		gchar *val = PyString_AsString (value);
		g_object_set (feed,
			prop, val,
			NULL);
		return 0;
	}
}
static PyMappingMethods _wrap_summer_feed_tp_as_mapping = {
	(lenfunc)_wrap_summer_feed_tp_length,
	(binaryfunc)_wrap_summer_feed_tp_getitem,
	(objobjargproc)_wrap_summer_feed_tp_setitem
};
%%
override-slot SummerItemData.tp_as_mapping
static Py_ssize_t
_wrap_summer_item_data_tp_length(PyGObject *self)
{
	return 8;
}
static PyObject *
_wrap_summer_item_data_tp_getitem(PyGObject *self, PyObject *item)
{
	PyObject *ret = NULL;
	SummerItemData *itd = SUMMER_ITEM_DATA (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "updated")) {
		ret = PyInt_FromLong (itd->updated);
	} else if (!g_strcmp0 (prop, "downloadables")) {
		ret = _wrap_summer_item_data_get_downloadables (self);
	} else if (!g_strcmp0 (prop, "feed")) {
		ret = pygobject_new (G_OBJECT (itd->feed));
	} else if (!g_strcmp0 (prop, "title")) {
		ret = PyString_FromString (itd->title);
	} else if (!g_strcmp0 (prop, "description")) {
		ret = PyString_FromString (itd->description);
	} else if (!g_strcmp0 (prop, "id")) {
		ret = PyString_FromString (summer_item_data_get_id (itd));
	} else if (!g_strcmp0 (prop, "web_url")) {
		ret = PyString_FromString (itd->web_url);
	} else if (!g_strcmp0 (prop, "author")) {
		ret = PyString_FromString (itd->author);
	}
	return ret;
}
static int
_wrap_summer_item_data_tp_setitem(PyGObject *self, PyObject *item, PyObject *value)
{
	SummerItemData *itd = SUMMER_ITEM_DATA (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "updated")) {
		itd->updated = PyInt_AsLong (value);
	} else if (!g_strcmp0 (prop, "title")) {
		itd->title = g_strdup (PyString_AsString (value));
	} else if (!g_strcmp0 (prop, "description")) {
		itd->description = g_strdup (PyString_AsString (value));
	} else if (!g_strcmp0 (prop, "id")) {
		itd->id = g_strdup (PyString_AsString (value));
	} else if (!g_strcmp0 (prop, "web_url")) {
		itd->web_url = g_strdup (PyString_AsString (value));
	} else if (!g_strcmp0 (prop, "author")) {
		itd->author = g_strdup (PyString_AsString (value));
	} else {
		return -1;
	}
	return 0;
}
static PyMappingMethods _wrap_summer_item_data_tp_as_mapping = {
	(lenfunc)_wrap_summer_item_data_tp_length,
	(binaryfunc)_wrap_summer_item_data_tp_getitem,
	(objobjargproc)_wrap_summer_item_data_tp_setitem
};
%%
override-slot SummerDownloadableData.tp_as_mapping
static Py_ssize_t
_wrap_summer_downloadable_data_tp_length(PyGObject *self)
{
	return 4;
}
static PyObject *
_wrap_summer_downloadable_data_tp_getitem(PyGObject *self, PyObject *item)
{
	PyObject *ret = NULL;
	SummerDownloadableData *dlable = SUMMER_DOWNLOADABLE_DATA (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "item")) {
		ret = pygobject_new (G_OBJECT (dlable->item));
	} else if (!g_strcmp0 (prop, "url")) {
		ret = PyString_FromString (dlable->url);
	} else if (!g_strcmp0 (prop, "mime")) {
		ret = PyString_FromString (dlable->mime);
	} else if (!g_strcmp0 (prop, "length")) {
		ret = PyLong_FromUnsignedLongLong (dlable->length);
	}
	return ret;
}
static int
_wrap_summer_downloadable_data_tp_setitem(PyGObject *self, PyObject *item, PyObject *value)
{
	SummerDownloadableData *dlable = SUMMER_DOWNLOADABLE_DATA (self->obj);
	gchar *prop = PyString_AsString (item);
	if (!g_strcmp0 (prop, "url")) {
		dlable->url = PyString_AsString (value);
	} else if (!g_strcmp0 (prop, "mime")) {
		dlable->mime = PyString_AsString (value);
	} else if (!g_strcmp0 (prop, "length")) {
		dlable->length = PyLong_AsUnsignedLongLong (value);
	} else {
		return -1;
	}
	return 0;
}
static PyMappingMethods _wrap_summer_downloadable_data_tp_as_mapping = {
	(lenfunc)_wrap_summer_downloadable_data_tp_length,
	(binaryfunc)_wrap_summer_downloadable_data_tp_getitem,
	(objobjargproc)_wrap_summer_downloadable_data_tp_setitem
};
%%
define SummerDownload.on_error

struct args {
	PyObject *function;
	PyObject *parameter;
};

static void
_on_error_cb (SummerDownload *dl, GError *error, gpointer user_data)
{
	PyObject *type;
	PyObject *value;
	PyObject *tb;
	struct args *arguments = (struct args*) user_data;
	pyglib_error_check (&error);
	PyErr_Fetch (&type, &value, &tb);
	if (type != NULL) {
		Py_DECREF (type);
	}
	if (tb != NULL) {
		Py_DECREF (tb);
	}

	PyObject *pydl = pygobject_new (G_OBJECT (dl));
	if (arguments->parameter == NULL) {
		PyObject_CallFunction(arguments->function, "OO", pydl, value);
	} else {
		PyObject_CallFunction(arguments->function, "OOO", pydl, value, arguments->parameter);
	}
	g_slice_free (struct args, arguments);
	Py_DECREF (value);
	Py_DECREF (pydl);
}
static PyObject*
_wrap_summer_download_on_error (PyGObject *self, PyObject *args)
{
	struct args *arguments = g_slice_new (struct args);
	if (!PyArg_ParseTuple (args, "O|O", &(arguments->function), &(arguments->parameter))) {
		PyErr_SetString (PyExc_TypeError, "Invalid parameters");
	}
	if (!PyFunction_Check (arguments->function)) {
		PyErr_SetString (PyExc_TypeError, "Argument must be callback method");
		return NULL;
	}
	SummerDownload *dl = SUMMER_DOWNLOAD (self->obj);
	g_signal_connect (dl, "download-error", G_CALLBACK (_on_error_cb), arguments);
	Py_INCREF (Py_None);
	return Py_None;
}
